rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Users folder - each user has their own folder structure
    match /users/{userId}/{allPaths=**} {
      // Users can read and write to their own folder
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Profile images - users can manage their own profile pictures
    match /users/{userId}/profile/{filename} {
      // Users can upload, read, update, and delete their own profile images
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      
      // Others can read profile images (for displaying in app)
      allow read: if request.auth != null;
    }
    
    // Post images and media
    match /users/{userId}/posts/{filename} {
      // Users can manage their own post media
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      
      // Others can read post media (for displaying posts)
      allow read: if request.auth != null;
    }
    
    // Story media (if implementing stories)
    match /users/{userId}/stories/{filename} {
      // Users can manage their own story media
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      
      // Others can read story media
      allow read: if request.auth != null;
    }
    
    // Chat media (if implementing chat with file sharing)
    match /chats/{chatId}/media/{filename} {
      // Any authenticated user can upload to chats they're part of
      // Note: You might want to add more specific rules based on chat participants
      allow read, write: if request.auth != null;
    }
    
    // Temporary uploads folder (for processing before moving to final location)
    match /temp/{userId}/{filename} {
      // Users can upload to their temp folder
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Public assets that anyone can read
    match /public/{allPaths=**} {
      // Anyone can read public assets
      allow read: if true;
      
      // Only authenticated users can write (admins should handle this)
      allow write: if request.auth != null;
    }
    
    // Thumbnails and processed images
    match /thumbnails/{allPaths=**} {
      // Anyone authenticated can read thumbnails
      allow read: if request.auth != null;
      
      // System/functions can write thumbnails
      allow write: if request.auth != null;
    }
    
    // User backup data
    match /backups/{userId}/{filename} {
      // Users can manage their own backups
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Admin files (restrict to admin users only)
    match /admin/{allPaths=**} {
      // Only admin users can access admin files
      allow read, write: if request.auth != null 
        && request.auth.token.admin == true;
    }
    
    // Validation rules for file uploads
    function isValidImageUpload() {
      return request.resource.size < 10 * 1024 * 1024  // 10MB limit
        && request.resource.contentType.matches('image/.*');
    }
    
    function isValidVideoUpload() {
      return request.resource.size < 100 * 1024 * 1024  // 100MB limit
        && request.resource.contentType.matches('video/.*');
    }
    
    function isValidAudioUpload() {
      return request.resource.size < 50 * 1024 * 1024  // 50MB limit
        && request.resource.contentType.matches('audio/.*');
    }
    
    // Apply validation to user uploads
    match /users/{userId}/profile/{filename} {
      allow write: if request.auth != null 
        && request.auth.uid == userId 
        && isValidImageUpload();
    }
    
    match /users/{userId}/posts/{filename} {
      allow write: if request.auth != null 
        && request.auth.uid == userId 
        && (isValidImageUpload() || isValidVideoUpload() || isValidAudioUpload());
    }
    
    match /users/{userId}/stories/{filename} {
      allow write: if request.auth != null 
        && request.auth.uid == userId 
        && (isValidImageUpload() || isValidVideoUpload());
    }
    
    // Default deny rule for any other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}